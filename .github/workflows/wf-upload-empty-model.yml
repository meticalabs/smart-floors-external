name: Upload Empty Model to S3

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: false
        type: string
        description: 'Python version'
        default: '3.10'
      aws_region:
        required: true
        type: choice
        description: 'AWS region to deploy'
        default: 'us-east-1'
        options:
          - us-east-1
          - eu-west-1
      update_allocator_service:
        required: true
        type: boolean
        description: 'Update the allocator service with the new endpoint details'
        default: false
      model_version:
        required: true
        type: string
        description: 'Model version (e.g., 1.0.20250710)'

env:
  us_east_1_bucket: com.metica.dev.dplat.artifacts
  eu_west_1_bucket: com.metica.prod-eu.dplat.artifacts
  us_east_1_allocator_base_uri: https://services-alb.dev.metica.com/experiments-allocator/api/v1/pipeline/experiment
  eu_west_1_allocator_base_uri: https://services-alb.prod-eu.metica.com/experiments-allocator/api/v1/pipeline/experiment
  us_east_1_role: ${{ secrets.DEV_AWS_DEPLOY_ROLE }}
  eu_west_1_role: ${{ secrets.PROD_EU_AWS_DEPLOY_ROLE }}

permissions:
  id-token: write
  contents: read

jobs:
  variables:
    outputs:
      ENVIRONMENT: ${{ steps.var.outputs.ENVIRONMENT }}
    runs-on: "ubuntu-latest"
    steps:
      - name: Setting global variables
        uses: actions/github-script@v6
        id: var
        with:
          script: |
            core.setOutput('ENVIRONMENT', '${{ inputs.aws_region }}'.toLowerCase().replaceAll(/[/-]/g, '_').trim('_'));
  upload-empty-model:
    runs-on: ubuntu-latest
    env:
      ROLE: $${{ format('{0}_role', needs.variables.outputs.ENVIRONMENT) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Get project name and version
        shell: bash -el {0}
        run: |
          pip install tomli
          NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['name'].replace('-', '_'))")
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "project_version=$VERSION" >> $GITHUB_OUTPUT
          echo "project_name=$NAME" >> $GITHUB_OUTPUT
        id: project

      - name: Make All
        uses: meticalabs/gh_workflows/.github/actions/uv-build@main
        with:
          github_token: ${{ secrets.CI_GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          run_make_all: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GH_OPENID_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ inputs.python_version }}

      - name: Make script executable
        run: chmod +x scripts/upload_empty_model.sh

      - name: Run upload script
        shell: bash -el {0}
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn ${{env.ROLE}} \
          --role-session-name MySessionName \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))
          conda info
          conda activate test
          python --version
          proj_wheel_file=$(echo "${{steps.project.outputs.project_name}}-${{steps.project.outputs.project_version}}-py3-none-any.whl")
          
          echo "Building $env_tar file from venv"
          which python
          python -m pip install ./dist/$proj_wheel_file
          
          REGION_UNDERSCORE=$(echo "${{ inputs.aws_region }}" | tr '-' '_')
          S3_BUCKET_NAME_VAR="${REGION_UNDERSCORE}_bucket"
          ALLOCATOR_BASE_URI_VAR="${REGION_UNDERSCORE}_allocator_base_uri"

          S3_BUCKET_NAME=${!S3_BUCKET_NAME_VAR}
          ALLOCATOR_BASE_URI=${!ALLOCATOR_BASE_URI_VAR}

          S3_PREFIX="sagemaker_inference/bid-floor-${{ inputs.model_version }}"
          S3_PATH="s3://${S3_BUCKET_NAME}/${S3_PREFIX}/"
          SCRIPT_ARGS="--s3-path $S3_PATH"

          if [ "${{ inputs.update_allocator_service }}" == "true" ]; then
            ALLOCATOR_URI="${ALLOCATOR_BASE_URI}/default_bid_floor/model"
            SCRIPT_ARGS="$SCRIPT_ARGS --update-allocator --allocator-uri $ALLOCATOR_URI --model-version ${{ inputs.model_version }}"
          fi

          chmod +x ./scripts/upload_empty_model.sh
          ./scripts/upload_empty_model.sh $SCRIPT_ARGS
