# This action will perform clean, format, install and test the python src

name: SageMaker Inference Docker Publish
description: "Publish Bid Floor Docker image to AWS ECR for SageMaker Inference"
inputs:
  python_version:
    required: true
    default: '3.10'
    description: 'Python version to use for installation'
  github_token:
    required: true
    description: 'Secret token for accessing GitHub packages'
  bid_floor_model_version:
    required: false
    description: 'Bid Floor Model version to use for installation'
    default: 'latest'
  image_tag_postfix:
    required: false
    description: 'Docker image tag postfix added'
    default: ''
  aws_region:
    required: true
    description: 'AWS region to deploy'
  ecr_repo:
    required: true
    description: 'ECR Repo Name'
  arm:
    required: false
    description: 'Deploy to ARM architecture'
    default: 'false'
  gh_openid_role_arn:
    required: true
    description: 'GH Open ID Role Arn'

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.6.14"

    - name: Make All
      uses: meticalabs/gh_workflows/.github/actions/poetry-conda-install@main
      with:
        github_token: ${{ inputs.github_token }}
        python_version: ${{ inputs.python_version }}
        branch: ${{ env.BRANCH_NAME }}
        run_make_all: true

    - name: Get project name and version
      shell: bash -el {0}
      run: |
        pip install tomli
        NAME=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['name'].replace('-', '_'))")
        VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "project_version=$VERSION" >> $GITHUB_OUTPUT
        echo "project_name=$NAME" >> $GITHUB_OUTPUT
      id: project

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.gh_openid_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Building tar from venv and publishing to s3
      shell: bash -el {0}
      run: |
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
        $(aws sts assume-role \
        --role-arn ${{env.ROLE}} \
        --role-session-name MySessionName \
        --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
        --output text))
        python --version
        cp dist/*.whl sagemaker-inference/
        cd sagemaker-inference/
        app_wheel_file_name=$(ls *.whl)
        echo "app_wheel_file_name=$app_wheel_file_name" >> $GITHUB_ENV
        echo "app_wheel_file_path=$(pwd)/$app_wheel_file_name" >> $GITHUB_ENV
        
        echo "Deploying Docker image to AWS ECR"
        AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
           
        # If the bid_floor_model_version is 'latest' then use project version with first two version
        # numbers, otherwise use the provided version.
        if [[ "${{ inputs.bid_floor_model_version }}" == "latest" ]]; then
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          IMAGE_TAG="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}"
        else
          IMAGE_TAG=${{ inputs.bid_floor_model_version }}
        fi
        
        if [[ -n "${{ inputs.image_tag_postfix }}" ]]; then
          IMAGE_TAG=$IMAGE_TAG.${{ inputs.image_tag_postfix }}
        else
          IMAGE_TAG=$IMAGE_TAG.$(date +%Y%m%d)
        fi
        
        aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com
        ECR_REGISTRY=$AWS_ACCOUNT.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com
        
        echo "Creating ECR Repository $ECR_REGISTRY/${{inputs.ecr_repo}} if not exists with image tag mutable"
        aws ecr describe-repositories --repository-names ${{inputs.ecr_repo}} || aws ecr create-repository --repository-name ${{inputs.ecr_repo}} --image-tag-mutability MUTABLE
        
        echo "docker build -t $ECR_REGISTRY/${{inputs.ecr_repo}}:$IMAGE_TAG --build-arg APP_WHEEL_FILE=$app_wheel_file_name ${{ inputs.arm == 'true' && '--platform linux/arm64' || '' }} ."
        docker build -t $ECR_REGISTRY/${{inputs.ecr_repo}}:$IMAGE_TAG --build-arg APP_WHEEL_FILE=$app_wheel_file_name ${{ inputs.arm == 'true' && '--platform linux/arm64' || '' }}.
        docker push $ECR_REGISTRY/${{inputs.ecr_repo}}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{inputs.ecr_repo}}:$IMAGE_TAG"
        
        echo "Create folder within artifacts s3 bucket for storing sagemaker inference image"
        aws s3api put-object --bucket com.metica.${{env.ENVIRONMENT}}.dplat.artifacts --key sagemaker_inference/bid-floor-$IMAGE_TAG/
